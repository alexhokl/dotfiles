#!/bin/bash

az_nsg_rule_list() {
	if [ -z "$(which az)" ]; then
		echo "az has not been installed"
		return
	fi
	if [ -z "$(which gum)" ]; then
		echo "gum has not been installed"
		return
	fi
	if [ -z "$(which jq)" ]; then
		echo "jq has not been installed"
		return
	fi

	local rg nsg rule group_file selected_group_file rule_file
	selected_group_file=$(mktemp)
	rule_file=$(mktemp)
	az network nsg list | jq -r '.[] | .resourceGroup + "," + .name' | gum filter --no-limit --placeholder='select NSG' >> $selected_group_file
	for g in $(cat $selected_group_file); do
		rg=$(echo $g | awk -F ',' '{ print $1 }')
		nsg=$(echo $g | awk -F ',' '{ print $2 }')
		az network nsg rule list -g $rg --nsg-name $nsg | jq -r '.[] | .name + "," + .sourceAddressPrefix' | xargs -I {} echo $g,{} >> $rule_file
	done
	cat $rule_file
}

az_nsg_rule_show() {
	if [ -z "$(which az)" ]; then
		echo "az has not been installed"
		return
	fi
	if [ -z "$(which gum)" ]; then
		echo "gum has not been installed"
		return
	fi
	if [ -z "$(which jq)" ]; then
		echo "jq has not been installed"
		return
	fi

	local rg nsg rule group_file selected_group_file rule_file selected_rule_file
	group_file=$(mktemp)
	selected_group_file=$(mktemp)
	rule_file=$(mktemp)
	selected_rule_file=$(mktemp)
	az network nsg list | jq -r '.[] | .resourceGroup + "," + .name' > $group_file
	cat $group_file | gum filter --no-limit --placeholder='select NSG' > $selected_group_file
	for g in $(cat $selected_group_file); do
		rg=$(echo $g | awk -F ',' '{ print $1 }')
		nsg=$(echo $g | awk -F ',' '{ print $2 }')
		az network nsg rule list -g $rg --nsg-name $nsg | jq -r '.[] | .name + "," + .sourceAddressPrefix' | xargs -I {} echo {},$g >> $rule_file
	done
	cat $rule_file | gum filter --no-limit --placeholder='select rule' > $selected_rule_file
	for r in $(cat $selected_rule_file); do
		rule=$(echo $r | awk -F ',' '{ print $1 }')
		rg=$(echo $r | awk -F ',' '{ print $3 }')
		nsg=$(echo $r | awk -F ',' '{ print $4 }')
	  az network nsg rule show -n $rule -g $rg --nsg-name $nsg
	done
}

az_nsg_rule_delete() {
	if [ -z "$(which az)" ]; then
		echo "az has not been installed"
		return
	fi
	if [ -z "$(which gum)" ]; then
		echo "gum has not been installed"
		return
	fi
	if [ -z "$(which jq)" ]; then
		echo "jq has not been installed"
		return
	fi

	local rg nsg rule group_file selected_group_file rule_file selected_rule_file
	group_file=$(mktemp)
	selected_group_file=$(mktemp)
	rule_file=$(mktemp)
	selected_rule_file=$(mktemp)
	az network nsg list | jq -r '.[] | .resourceGroup + "," + .name' > $group_file
	cat $group_file | gum filter --no-limit --placeholder='select NSG' > $selected_group_file
	for g in $(cat $selected_group_file); do
		rg=$(echo $g | awk -F ',' '{ print $1 }')
		nsg=$(echo $g | awk -F ',' '{ print $2 }')
		az network nsg rule list -g $rg --nsg-name $nsg | jq -r '.[] | .name + "," + .sourceAddressPrefix' | xargs -I {} echo {},$g >> $rule_file
	done
	cat $rule_file | gum filter --no-limit --placeholder='select rule' > $selected_rule_file
	for r in $(cat $selected_rule_file); do
		rule=$(echo $r | awk -F ',' '{ print $1 }')
		rg=$(echo $r | awk -F ',' '{ print $3 }')
		nsg=$(echo $r | awk -F ',' '{ print $4 }')
		az network nsg rule delete -g $rg --nsg-name $nsg -n $rule
		echo "rule $rule of NSG $nsg in resource group $rg has been deleted"
	done
}

az_nsg_rule_update_source_ip() {
	if [ -z "$(which az)" ]; then
		echo "az has not been installed"
		return
	fi
	if [ -z "$(which gum)" ]; then
		echo "gum has not been installed"
		return
	fi
	if [ -z "$(which jq)" ]; then
		echo "jq has not been installed"
		return
	fi

	local new_ip rg nsg rule old_ip group_file selected_group_file rule_file selected_rule_file

	new_ip=$(gum input --placeholder "Enter new IP")

	if [ -z "$new_ip" ]; then
		echo "No IP address specified"
		return
	fi
	if [[ ! $new_ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
		echo "Invalid IP address"
		return
	fi

	group_file=$(mktemp)
	selected_group_file=$(mktemp)
	rule_file=$(mktemp)
	selected_rule_file=$(mktemp)
	az network nsg list | jq -r '.[] | .resourceGroup + "," + .name' > $group_file
	cat $group_file | gum filter --no-limit --placeholder='select NSG' > $selected_group_file
	for g in $(cat $selected_group_file); do
		rg=$(echo $g | awk -F ',' '{ print $1 }')
		nsg=$(echo $g | awk -F ',' '{ print $2 }')
		az network nsg rule list -g $rg --nsg-name $nsg | jq -r '.[] | .name + "," + .sourceAddressPrefix' | xargs -I {} echo {},$g >> $rule_file
	done
	cat $rule_file | gum filter --no-limit --placeholder='select rule' > $selected_rule_file
	for r in $(cat $selected_rule_file); do
		rule=$(echo $r | awk -F ',' '{ print $1 }')
		old_ip=$(echo $r | awk -F ',' '{ print $2 }')
		rg=$(echo $r | awk -F ',' '{ print $3 }')
		nsg=$(echo $r | awk -F ',' '{ print $4 }')
		az network nsg rule update -g $rg --nsg-name $nsg -n $rule --source-address-prefix $new_ip
		echo IP address changed from $(gum style --foreground=#99000 $old_ip) to $(gum style --foreground=#009900 $new_ip) in $(gum style --foreground=#999900 $rg/$nsg/$rule) :+1: | gum format -t emoji
	done
}

az_nsg_rule_add() {
	if [ -z "$(which az)" ]; then
		echo "az has not been installed"
		return
	fi
	if [ -z "$(which gum)" ]; then
		echo "gum has not been installed"
		return
	fi
	if [ -z "$(which jq)" ]; then
		echo "jq has not been installed"
		return
	fi

	local new_ip rg nsg rule old_ip group_file selected_group_file rule_file selected_rule_file lowest_priority priority port
	group_file=$(mktemp)
	selected_group_file=$(mktemp)
	rule_file=$(mktemp)
	selected_rule_file=$(mktemp)

	az network nsg list | jq -r '.[] | .resourceGroup + "," + .name' > $group_file
	cat $group_file | gum filter --placeholder='select NSG' > $selected_group_file
	for g in $(cat $selected_group_file); do
		rg=$(echo $g | awk -F ',' '{ print $1 }')
		nsg=$(echo $g | awk -F ',' '{ print $2 }')
		lowest_priority=$(az network nsg rule list -g $rg --nsg-name $nsg | jq -r '.[] | .priority' | sort | tail -n 1)
		priority=$((lowest_priority + 1))
	done

	rule=$(gum input --placeholder "Enter name of the new NSG rule")
	if [ -z "$rule" ]; then
		echo "No rule name specified"
		return
	fi

	new_ip=$(gum input --placeholder "Enter IP address")
	if [ -z "$new_ip" ]; then
		echo "No IP address specified"
		return
	fi
	if [[ ! $new_ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
		echo "Invalid IP address"
		return
	fi

	priority=$(gum input --placeholder "Enter priority" --value="$priority")
	if [ -z "$priority" ]; then
		echo "No priority specified"
		return
	fi

	port=$(gum input --placeholder "Enter port")
	if [ -z "$port" ]; then
		echo "No port specified"
		return
	fi

	az network nsg rule create \
		-g $rg \
		--nsg-name $nsg \
		-n $rule \
		--source-address-prefix "${new_ip}" \
	  --destination-port-ranges $port \
		--priority "${priority}" \
		--protocol Tcp
}

az_postgres_firewall_rule_list() {
	if [ -z "$(which az)" ]; then
		echo "az has not been installed"
		return
	fi
	if [ -z "$(which gum)" ]; then
		echo "gum has not been installed"
		return
	fi
	if [ -z "$(which jq)" ]; then
		echo "jq has not been installed"
		return
	fi

	local new_ip rg server rule old_ip selected_group_file rule_file selected_rule_file

	selected_group_file=$(mktemp)
	rule_file=$(mktemp)
	selected_rule_file=$(mktemp)
	az postgres server list | jq -r '.[] | .resourceGroup + "," + .name' | gum filter --no-limit --placeholder='select server' > $selected_group_file
	for g in $(cat $selected_group_file); do
		rg=$(echo $g | awk -F ',' '{ print $1 }')
		server=$(echo $g | awk -F ',' '{ print $2 }')
		az postgres server firewall-rule list -g $rg -s $server | jq -r '.[] | .name + "," + .startIpAddress + "," + .endIpAddress' | xargs -I {} echo {},$g >> $rule_file
	done
	cat $rule_file | gum filter --no-limit --placeholder='select rule' > $selected_rule_file
	cat $selected_rule_file
}

az_postgres_firewall_rule_update_source_ip() {
	if [ -z "$(which az)" ]; then
		echo "az has not been installed"
		return
	fi
	if [ -z "$(which gum)" ]; then
		echo "gum has not been installed"
		return
	fi
	if [ -z "$(which jq)" ]; then
		echo "jq has not been installed"
		return
	fi

	local new_ip rg server rule old_ip selected_group_file rule_file selected_rule_file

	new_ip=$(gum input --placeholder "Enter new IP")

	if [ -z "$new_ip" ]; then
		echo "No IP address specified"
		return
	fi
	if [[ ! $new_ip =~ ^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$ ]]; then
		echo "Invalid IP address"
		return
	fi

	selected_group_file=$(mktemp)
	rule_file=$(mktemp)
	selected_rule_file=$(mktemp)
	az postgres server list | jq -r '.[] | .resourceGroup + "," + .name' | gum filter --no-limit --placeholder='select server' > $selected_group_file
	for g in $(cat $selected_group_file); do
		rg=$(echo $g | awk -F ',' '{ print $1 }')
		server=$(echo $g | awk -F ',' '{ print $2 }')
		az postgres server firewall-rule list -g $rg -s $server | jq -r '.[] | .name + "," + .startIpAddress + "," + .endIpAddress' | xargs -I {} echo {},$g >> $rule_file
	done
	cat $rule_file | gum filter --no-limit --placeholder='select rule' > $selected_rule_file
	for r in $(cat $selected_rule_file); do
		rule=$(echo $r | awk -F ',' '{ print $1 }')
		old_ip=$(echo $r | awk -F ',' '{ print $2 }')
		rg=$(echo $r | awk -F ',' '{ print $4 }')
		server=$(echo $r | awk -F ',' '{ print $5 }')
		az postgres server firewall-rule update -g $rg -s $server -n $rule --start-ip-address $new_ip --end-ip-address $new_ip
		echo IP address changed from $old_ip to $new_ip in $rg/$server/$rule
	done
}

az_postgres_firewall_rule_add() {
	if [ -z "$(which az)" ]; then
		echo "az has not been installed"
		return
	fi
	if [ -z "$(which gum)" ]; then
		echo "gum has not been installed"
		return
	fi
	if [ -z "$(which jq)" ]; then
		echo "jq has not been installed"
		return
	fi

	local new_ip rg server rule old_ip selected_group_file rule_file selected_rule_file

	rule=$(gum input --placeholder "Enter new rule name")

	if [ -z "$rule" ]; then
		echo "No rule name specified"
		return
	fi

	new_ip=$(gum input --placeholder "Enter new IP")

	if [ -z "$new_ip" ]; then
		echo "No IP address specified"
		return
	fi
	if [[ ! $new_ip =~ ^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$ ]]; then
		echo "Invalid IP address"
		return
	fi

	selected_group_file=$(mktemp)
	rule_file=$(mktemp)
	selected_rule_file=$(mktemp)
	az postgres server list | jq -r '.[] | .resourceGroup + "," + .name' | gum filter --placeholder='select server' > $selected_group_file
	for g in $(cat $selected_group_file); do
		rg=$(echo $g | awk -F ',' '{ print $1 }')
		server=$(echo $g | awk -F ',' '{ print $2 }')
	done
	az postgres server firewall-rule create -g $rg -s $server -n $rule --start-ip-address $new_ip --end-ip-address $new_ip
	echo IP address $new_ip has been added to $rg/$server/$rule
}

az_storage_account_update_ip() {
	if [ -z "$(which az)" ]; then
		echo "az has not been installed"
		return
	fi
	if [ -z "$(which gum)" ]; then
		echo "gum has not been installed"
		return
	fi
	if [ -z "$(which jq)" ]; then
		echo "jq has not been installed"
		return
	fi

	local new_ip rg account rule old_ip account_file selected_account_file rule_file selected_rule_file

	old_ip=$(gum input --placeholder "Enter original IP")
	if [ -z "$old_ip" ]; then
		echo "No original IP address specified"
		return
	fi
	if [[ ! $old_ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
		echo "Invalid origin IP address"
		return
	fi

	new_ip=$(gum input --placeholder "Enter new IP")
	if [ -z "$new_ip" ]; then
		echo "No new IP address specified"
		return
	fi
	if [[ ! $new_ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
		echo "Invalid origin IP address"
		return
	fi

	account_file=$(mktemp)
	selected_account_file=$(mktemp)
	rule_file=$(mktemp)
	selected_rule_file=$(mktemp)
	az storage account list | jq -r '.[] | .resourceGroup + "," + .name' > $account_file
	cat $account_file | gum filter --no-limit > $selected_account_file
	for a in $(cat $selected_account_file); do
		rg=$(echo $a | awk -F ',' '{ print $1 }')
		account=$(echo $a | awk -F ',' '{ print $2 }')
		az storage account network-rule list -g $rg -n $account | jq -r ".ipRules | .[] | select(.ipAddressOrRange==\"$1\") | .ipAddressOrRange" | xargs -I {} echo $a,{} >> $rule_file
	done
	cat $rule_file | gum filter --no-limit > $selected_rule_file
	for r in $(cat $selected_rule_file); do
		rg=$(echo $r | awk -F ',' '{ print $1 }')
		account=$(echo $r | awk -F ',' '{ print $2 }')
	  az storage account network-rule remove -g $rg -n $account --ip-address "${old_ip}"
	  az storage account network-rule add -g $rg -n $account --ip-address "${new_ip}"
		echo IP address changed from $old_ip to $new_ip in $rg/$account
	done
}

az_storage_account_add_ip() {
	if [ -z "$(which az)" ]; then
		echo "az has not been installed"
		return
	fi
	if [ -z "$(which gum)" ]; then
		echo "gum has not been installed"
		return
	fi
	if [ -z "$(which jq)" ]; then
		echo "jq has not been installed"
		return
	fi

	local new_ip rg account rule old_ip account_file selected_account_file

	new_ip=$(gum input --placeholder "Enter new IP")
	if [ -z "$new_ip" ]; then
		echo "No new IP address specified"
		return
	fi
	if [[ ! $new_ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
		echo "Invalid origin IP address"
		return
	fi

	account_file=$(mktemp)
	selected_account_file=$(mktemp)
	az storage account list | jq -r '.[] | .resourceGroup + "," + .name' > $account_file
	cat $account_file | gum filter --no-limit > $selected_account_file
	for a in $(cat $selected_account_file); do
		rg=$(echo $a | awk -F ',' '{ print $1 }')
		account=$(echo $a | awk -F ',' '{ print $2 }')
	  az storage account network-rule add -g $rg -n $account --ip-address "${new_ip}"
	done
}

az_storage_account_delete_ip() {
	if [ -z "$(which az)" ]; then
		echo "az has not been installed"
		return
	fi
	if [ -z "$(which gum)" ]; then
		echo "gum has not been installed"
		return
	fi
	if [ -z "$(which jq)" ]; then
		echo "jq has not been installed"
		return
	fi

	local rg account rule old_ip account_file selected_account_file rule_file selected_rule_file
	account_file=$(mktemp)
	selected_account_file=$(mktemp)
	rule_file=$(mktemp)
	selected_rule_file=$(mktemp)
	az storage account list | jq -r '.[] | .resourceGroup + "," + .name' > $account_file
	cat $account_file | gum filter --no-limit > $selected_account_file
	for a in $(cat $selected_account_file); do
		rg=$(echo $a | awk -F ',' '{ print $1 }')
		account=$(echo $a | awk -F ',' '{ print $2 }')
		az storage account network-rule list -g $rg -n $account | jq -r ".ipRules | .[] | .ipAddressOrRange" | xargs -I {} echo $a,{} >> $rule_file
	done
	cat $rule_file | gum filter --no-limit > $selected_rule_file
	for r in $(cat $selected_rule_file); do
		rg=$(echo $r | awk -F ',' '{ print $1 }')
		account=$(echo $r | awk -F ',' '{ print $2 }')
		old_ip=$(echo $r | awk -F ',' '{ print $3 }')
		az storage account network-rule remove -g $rg -n $account --ip-address "${old_ip}"
		echo Deleted IP address $old_ip in $rg/$account
	done
}

az_storage_account_list_ip() {
	if [ -z "$(which gum)" ]; then
		echo "gum has not been installed"
		return
	fi
	if [ -z "$(which jq)" ]; then
		echo "jq has not been installed"
		return
	fi

	local rg account rule old_ip account_file selected_account_file
	account_file=$(mktemp)
	selected_account_file=$(mktemp)
	rule_file=$(mktemp)
	az storage account list | jq -r '.[] | .resourceGroup + "," + .name' > $account_file
	cat $account_file | gum filter --no-limit > $selected_account_file
	for a in $(cat $selected_account_file); do
		rg=$(echo $a | awk -F ',' '{ print $1 }')
		account=$(echo $a | awk -F ',' '{ print $2 }')
		az storage account network-rule list -g $rg -n $account | jq -r ".ipRules | .[] | .ipAddressOrRange" | xargs -I {} echo $a,{} >> $rule_file
	done
	cat $rule_file
}

az_aks_get_credentials() {
	if [ -z "$(which az)" ]; then
		echo "az has not been installed"
		return
	fi
	if [ -z "$(which jq)" ]; then
		echo "jq has not been installed"
		return
	fi

	local rg aks
	rg=$(az aks list | jq -r '.[] | .resourceGroup' | sort | uniq | fzf-tmux)
	aks=$(az aks list -g $rg | jq -r '.[] | .name' | sort | uniq | fzf-tmux)
	if [ -z "$1" ]; then
		az aks get-credentials -g $rg -n $aks
	else
		az aks get-credentials -g $rg -n $aks --context $1
	fi
}

az_role_permission_list() {
	if [ -z "$(which az)" ]; then
		echo "az has not been installed"
		return
	fi
	if [ -z "$(which jq)" ]; then
		echo "jq has not been installed"
		return
	fi

	local role
	role=$(az role definition list | jq -r '.[] | .roleName' | sort | uniq | fzf-tmux)
	az role definition list -n $role | jq -r '.[] | .permissions[] | .actions[]'
}

az_aks_api_ip_list() {
	if [ -z "$(which az)" ]; then
		echo "az has not been installed"
		return
	fi
	if [ -z "$(which jq)" ]; then
		echo "jq has not been installed"
		return
	fi
	if [ -z "$(which gum)" ]; then
		echo "gum has not been installed"
		return
	fi

	local rg aks aks_choice
	aks_choice=$(az aks list | jq -r '.[] | .resourceGroup + "," + .name' | sort | gum filter --limit=1)
	rg=$(echo $aks_choice | awk -F ',' '{ print $1 }')
	aks=$(echo $aks_choice | awk -F ',' '{ print $2 }')

	az aks show -g $rg -n $aks | jq -r '.apiServerAccessProfile.authorizedIpRanges[]' | sort
}

az_aks_api_ip_update() {
	if [ -z "$(which az)" ]; then
		echo "az has not been installed"
		return
	fi
	if [ -z "$(which jq)" ]; then
		echo "jq has not been installed"
		return
	fi
	if [ -z "$(which gum)" ]; then
		echo "gum has not been installed"
		return
	fi

	local rg aks aks_choice whitelist_string new_list
	aks_choice=$(az aks list | jq -r '.[] | .resourceGroup + "," + .name' | sort | gum filter --limit=1)
	rg=$(echo $aks_choice | awk -F ',' '{ print $1 }')
	aks=$(echo $aks_choice | awk -F ',' '{ print $2 }')

	whitelist_string=$(az aks show -g $rg -n $aks | jq -r '.apiServerAccessProfile.authorizedIpRanges[]' | sort | xargs -I {} echo {}, | xargs echo)

	new_list=$(gum input --value "$whitelist_string" --placeholder "IP address or CIDR range" --char-limit=0)
	if [ -z "$new_list" ]; then
		echo empty list, no updating
		return
	fi

	az aks update -g $rg -n $aks --api-server-authorized-ip-ranges "${new_list}"
}
