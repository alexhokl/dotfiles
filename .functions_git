#!/bin/bash

# gb - checkout git branch
gb() {
  local branches branch
  branches=$(git --no-pager branch -vv) &&
  branch=$(echo "$branches" | fzf-tmux +m) &&
  git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

gbd() {
  local branches branch
  branches=$(git --no-pager branch -vv) &&
  branch=$(echo "$branches" | fzf-tmux +m) &&
  git branch -D $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

# gco - checkout git branch (including remote branches)
gco() {
	if [ "$1" == "-" ]; then
		git checkout -
		return
	fi
	if [ -n "$1" ]; then
		git checkout $1,
		return
	fi

  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# gmb - merge git branch (including remote branches)
gmb() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  echo git merge $(echo "$branch" | sed "s/.* //" | sed "s/remotes\///")
  git merge $(echo "$branch" | sed "s/.* //" | sed "s/remotes\///")
}

# gfc - show git commit
gfc() {
  local commits commit
  commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
  commit=$(echo "$commits" | fzf-tmux --tac +s +m -e) &&
  git show $(echo "$commit" | sed "s/ .*//")
}

gd() (
  local branches branch target
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  target=$(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")

  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && echo ${files} && git diff ${target} "${files[@]}"
)

gl() (
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && echo ${files} && git lg "${files[@]}"
)

gls() (
  local commits commit
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  commits=$(git log --pretty=oneline --abbrev-commit --reverse "$files") &&
  commit=$(echo "$commits" | fzf-tmux --tac +s +m -e) &&
  git show $(echo "$commit" | sed "s/ .*//") "$files"
)

gfm() {
	if [ -z "$1" ]; then
		echo "No commit message specified"
		return
	fi

  local commits commit branches branch trimmed_branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
					 (echo "-$branch-" | sed "s/.* //" | sed "s/remotes\///")
	trimmed_branch=$(echo $branch | tr -d ' ')
 	git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --reverse --date=short --decorate --no-merges -E --grep="(${1})" "${trimmed_branch}"
}

gfmp() {
	if [ -z "$1" ]; then
		echo "No commit message specified"
		return
	fi

	local commits commit branches branch trimmed_branch commit_list_file
	branches=$(git branch --all | grep -v HEAD) &&
	branch=$(echo "$branches" |
					 fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
					 (echo "-$branch-" | sed "s/.* //" | sed "s/remotes\///")
	trimmed_branch=$(echo $branch | tr -d ' ')
	commit_list_file=$(mktemp)
 	git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --reverse --date=short --decorate --no-merges -E --grep="(${1})" "${trimmed_branch}" > $commit_list_file
	$EDITOR $commit_list_file
	cat $commit_list_file | awk '{print $1}' | xargs git cherry--pick
}

ga() {
	git ls-files --modified --others --exclude-standard | fzf-tmux -m | xargs git add
}

